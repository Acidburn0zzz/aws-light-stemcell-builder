# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

cfg = JSON.parse(File.read(ENV.fetch('VAGRANT_CONFIG_FILE')))
vm_user = cfg.fetch('VM_USER')
region = cfg.fetch('AWS_DEFAULT_REGION')
access_key_id = cfg.fetch('AWS_ACCESS_KEY_ID')
secret_access_key = cfg.fetch('AWS_SECRET_ACCESS_KEY')
source_ami = cfg.fetch('SOURCE_AMI')

Vagrant.configure(2) do |config|
  config.vm.box = 'dummy'

  config.vm.provider :aws do |aws, override|
    aws.instance_type = 'm3.xlarge'
    aws.block_device_mapping = [{ 'DeviceName' => '/dev/sda1', 'Ebs.VolumeSize' => 30 }]
    aws.instance_ready_timeout = 600

    aws.region = region
    aws.access_key_id = access_key_id
    aws.secret_access_key = secret_access_key

    aws.tags = { 'Name' => cfg.fetch('VM_NAME') }
    aws.keypair_name = cfg.fetch('VM_KEYPAIR_NAME')
    aws.ami = cfg.fetch('VM_AMI')

    aws.associate_public_ip = true
    aws.subnet_id = cfg.fetch('AWS_SUBNET_ID')
    aws.security_groups = [cfg.fetch('AWS_SECURITY_GROUP')]

    override.ssh.username = vm_user
    override.ssh.private_key_path = cfg.fetch('VM_PRIVATE_KEY_FILE')
    override.nfs.functional = false
  end

  config.vm.provision :shell do |shell|
    shell.privileged = true
    shell.inline = <<-BASH
      set -e

      apt-get update; apt-get -y upgrade; apt-get clean

      apt-get install -y curl unzip python3 jq; apt-get clean

      pushd /tmp
        curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        unzip awscli-bundle.zip
        python3 ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        rm -rf awscli-bundle.zip awscli-bundle/
      popd

    BASH
  end

  config.vm.provision :shell do |shell|
    shell.privileged = true
    shell.inline = <<-BASH
      set -e

      export AWS_DEFAULT_REGION=#{region}
      export AWS_ACCESS_KEY_ID=#{access_key_id}
      export AWS_SECRET_ACCESS_KEY=#{secret_access_key}

      instance_id=$(curl --retry 10 --connect-timeout 60 http://169.254.169.254/latest/meta-data/instance-id/)
      echo "Instance ID: ${instance_id}"

      target_snapshot="$(aws ec2 describe-images --image-ids #{source_ami} | \
        jq -r '.Images[0].BlockDeviceMappings[] | select(has("Ebs")) | .Ebs.SnapshotId')"
      echo "Snapshot ID: ${target_snapshot}"

      # determining instance az
      instance_az=$(aws ec2 describe-instances --instance-id ${instance_id} | jq -r .Reservations[0].Instances[0].Placement.AvailabilityZone)

      # attach volume to current instance
      echo "Creating volume"
      volume_id=$(aws ec2 create-volume --snapshot-id ${target_snapshot} --availability-zone ${instance_az} | jq -r .VolumeId)
      volume_size="$(aws ec2 describe-volumes --volume-id ${volume_id} | jq -r .Volumes[0].Size)"

      device_name=/dev/xvdm
      echo "Attaching the volume ${volume_id} to ${device_name}"
      until [ "$(aws ec2 describe-volumes --volume-id ${volume_id} | jq -r .Volumes[0].State)" == 'available' ]; do
        sleep 10
      done

      aws ec2 attach-volume --instance-id ${instance_id} --volume-id ${volume_id} --device ${device_name}
      until [ "$(aws ec2 describe-volumes --volume-id ${volume_id} | jq -r .Volumes[0].Attachments[0].State)" == 'attached' ]; do
        sleep 10
      done

      echo "Creating machine image from ${device_name}"
      dd if=${device_name} of=/vagrant/root.img
      tar czvf /vagrant/image -C /vagrant/ root.img

      cat << EOF > /vagrant/stemcell.MF
---
cloud_properties:
  disk: $(( ${volume_size} * 1024 ))
  disk_format: raw
EOF

      tar czvf /vagrant/vmdk-ami.tgz -C /vagrant image stemcell.MF
    BASH
  end
end
